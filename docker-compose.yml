version: "3.8"
services:

  #PHP service
#  php:
#    build:
#      context: .
#      target: php
#      args:
#        - APP_ENV=${APP_ENV}
#    environment:
#      - APP_ENV=${APP_ENV}
#      - CONTAINER_ROLE=app
#    working_dir: /var/www
#    volumes:
#      - ./:/var/www
#    ports:
#      - 8000:8000
#    depends_on:
#      - database
#      - redis

  #Websocket service
 # websocket:
  #  build:
   #   context: .
    #  target: php
     # args:
      #  - APP_ENV=${APP_ENV}
   # environment:
    #  - APP_ENV=${APP_ENV}
     # - CONTAINER_ROLE=websocket
   # working_dir: /var/www
   # volumes:
    #  - ./:/var/www
   # ports:
    #  - 6001:6001
   # depends_on:
    #  - database
     # - redis

  #Database service
#  database:
#    image: mysql:8.0
#    ports: 
#      - 3306:3306
#    environment:
#      - MYSQL_DATABASE=${DB_DATABASE}
#      - MYSQL_USER=${DB_USERNAME}
#      - MYSQL_PASSWORD=${DB_PASSWORD}
#      - MYSQL_ROOT_PASSWORD=rootpassword
#    volumes:
#      - ./docker/data/db-data:/var/lib/mysql
#      - ./docker/ini/db-ini:/docker-entrypoint-initdb.d #test создался после удаления всех файлов бд и разрешения на исполнение 01 sql
      
  #Redis server
#  redis:
#    image: redis:alpine
#    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
#    ports:
#      - 6379:6379

  #Queue server
#  queue:
#    build: 
#      context: .
#      target: php
#      args:
#        - APP_ENV=${APP_ENV}
#    environment:
#      - APP_ENV=${APP_ENV}
#      - CONTAINER_ROLE=queue
#    working_dir: /var/www
#    volumes:
#      - ./:/var/www

  #Node server
  node:
    build:
      context: .
      target: node
    volumes:
#      - .:/usr/src
#      - ./node_modules:/usr/src/node_modules
      - ./:/var/www
    ports:
      - 8080:8080
    tty: true

volumes:
  db-data: ~
